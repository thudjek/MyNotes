@page "/forgot-password"
@layout NotAuthorizedLayout
@using SharedModels.Requests.Auth
@using WebApp.Common.Exceptions
@inject PopupMessageService _popupMessageService
@inject ApiService _apiService

@if (!isSubmitSuccessful)
{
    <h5>Enter your email to reset password:</h5>
    <br />
    <EditForm Model="@forgotPasswordRequest" OnSubmit="SubmitForgotPassword">
        <CustomValidator @ref="customValidator" />
        <div class="row">
            <div class="col-8 offset-2 col-md-6 offset-md-3 col-lg-5 offset-lg-3point5 col-xl-4 offset-xl-4 mb-3 text-start">
                <InputText class="form-control input" placeholder="Email" @bind-Value=forgotPasswordRequest.Email />
                <ValidationMessage For="() => forgotPasswordRequest.Email" />
            </div>
        </div>
        <div class="row">
            <div class="col-8 offset-2 col-md-6 offset-md-3 col-lg-5 offset-lg-3point5 col-xl-4 offset-xl-4 mb-3">
                <button class="btn btn-primary w-100" type="submit">Submit</button>
            </div>
        </div>
    </EditForm>
    <div class="row">
    <div class="col-8 offset-2 col-md-6 offset-md-3 col-lg-5 offset-lg-3point5 col-xl-4 offset-xl-4 mb-3">
        <div class="separator">Or</div>
    </div>
    <div class="col-8 offset-2 col-md-6 offset-md-3 col-lg-5 offset-lg-3point5 col-xl-4 offset-xl-4 mb-3 text-center">
        <a class="link" href="login">Log in</a>
    </div>
    <div class="col-8 offset-2 col-md-6 offset-md-3 col-lg-5 offset-lg-3point5 col-xl-4 offset-xl-4 mb-3">
        <p>Don't have an account? <a class="link" href="sign-up">Sign up</a></p>
    </div>
</div>
}
else
{
    <h3>We've sent you an email with link for reseting password.</h3>
}

@code {
    private bool isSubmitSuccessful = false;
    private ForgotPasswordRequest forgotPasswordRequest = new();
    private CustomValidator customValidator;

    private async Task SubmitForgotPassword()
    {
        try
        {
            await _apiService.Post<ForgotPasswordRequest>("auth/forgot-password", forgotPasswordRequest);
            isSubmitSuccessful = true;
        }
        catch (ValidationException ex)
        {
            customValidator.ClearErrors();
            customValidator.DisplayErrors(ex.ErrorsGrouped);
        }
        catch (ApplicationException ex)
        {
            _popupMessageService.ShowPopup(ex.Message, PopupMessageType.Error);
        }
    }
}