@page "/confirm-email"
@layout NotAuthorizedLayout
@using Microsoft.AspNetCore.WebUtilities
@using SharedModels.Requests.Auth
@inject IHttpClientFactory _httpClientFactory
@inject PopupMessageService _popupMessageService
@inject NavigationManager _navigationManager

@if(isConfirmationSuccessful.HasValue && isConfirmationSuccessful.Value == true)
{
    <h3>Email confirmation was successful. <a class="link" href="login">Login</a></h3>
}

@if(isConfirmationSuccessful.HasValue && isConfirmationSuccessful.Value == false)
{
    <h3>Something went wrong while trying to confirm your email.</h3>
    <h3>You can <a class="link" @onclick="ResendEmail">resend</a> confirmation email and try again.</h3>
}

@code {
    private bool? isConfirmationSuccessful = null;
    private HttpClient httpClient = null;
    ConfirmEmailRequest confirmEmailRequest = new();

    protected override async Task OnInitializedAsync()
    {
        httpClient = _httpClientFactory.CreateClient(Constants.HttpClientName);
        MapQueryStringValuesToRequest();
        await PostRequest();
    }

    private void MapQueryStringValuesToRequest()
    {
        var uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri);
        var queryString = uri.Query.Replace("+", "*PLUS*");
        if (QueryHelpers.ParseQuery(queryString).TryGetValue("email", out var email))
        {
            confirmEmailRequest.Email = email.ToString().Replace("*PLUS*", "+");
        }

        if (QueryHelpers.ParseQuery(queryString).TryGetValue("token", out var token))
        {
            confirmEmailRequest.Token = token.ToString().Replace("*PLUS*", "+");
        }
    }

    private async Task PostRequest()
    {
        var httpResponse = await httpClient.PostAsJsonAsync("auth/confirm-email", confirmEmailRequest);
        if (httpResponse.IsSuccessStatusCode)
        {
            isConfirmationSuccessful = true;
        }
        else
        {
            isConfirmationSuccessful = false;
        }
    }

    private async Task ResendEmail()
    {
        await httpClient.PostAsJsonAsync("auth/resend-confirmation-email", new ResendConfirmationEmailRequest() { Email = confirmEmailRequest.Email ?? string.Empty });
        _popupMessageService.ShowPopup("Confirmation email has been sent", PopupMessageType.Success);
    }
}
