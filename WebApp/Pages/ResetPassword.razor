@page "/reset-password"
@layout NotAuthorizedLayout
@using Microsoft.AspNetCore.WebUtilities
@using SharedModels.Requests.Auth
@using WebApp.Common.Exceptions
@inject NavigationManager _navigationManager
@inject PopupMessageService _popupMessageService
@inject ApiService _apiService

@if (!isConfirmationSuccessful)
{
    <EditForm Model="@resetPasswordRequest" OnSubmit="SubmitResetPassword">
        <CustomValidator @ref="customValidator" />
        <div class="row">
            <div class="col-8 offset-2 col-md-6 offset-md-3 col-lg-5 offset-lg-3point5 col-xl-4 offset-xl-4 mb-3 text-start">
                <InputText class="form-control input" placeholder="Password" type="password" @bind-Value=resetPasswordRequest.Password />
                <ValidationMessage For="() => resetPasswordRequest.Password" />
            </div>
        </div>
        <div class="row">
                <div class="col-8 offset-2 col-md-6 offset-md-3 col-lg-5 offset-lg-3point5 col-xl-4 offset-xl-4 mb-3 text-start">
                <InputText class="form-control input" placeholder="Confirm password" type="password" @bind-Value=resetPasswordRequest.ConfirmPassword />
                <ValidationMessage For="() => resetPasswordRequest.ConfirmPassword" />
            </div>
        </div>
        <div class="row">
            <div class="col-8 offset-2 col-md-6 offset-md-3 col-lg-5 offset-lg-3point5 col-xl-4 offset-xl-4 mb-3">
                <button class="btn btn-primary w-100" type="submit">Reset Password</button>
            </div>
        </div>
    </EditForm>
}
else
{
    <h3>Password reset was successful. <a class="link" href="login">Login</a></h3>
}

@code {
    private bool isConfirmationSuccessful = false;
    private ResetPasswordRequest resetPasswordRequest = new();
    private CustomValidator customValidator;

    protected override void OnInitialized()
    {
        MapQueryStringValuesToRequest();
    }

    private void MapQueryStringValuesToRequest()
    {
        var uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri);
        var queryString = uri.Query.Replace("+", "*PLUS*");
        if (QueryHelpers.ParseQuery(queryString).TryGetValue("email", out var email))
        {
            resetPasswordRequest.Email = email.ToString().Replace("*PLUS*", "+");
        }

        if (QueryHelpers.ParseQuery(queryString).TryGetValue("token", out var token))
        {
            resetPasswordRequest.Token = token.ToString().Replace("*PLUS*", "+");
        }
    }

    private async Task SubmitResetPassword()
    {
        try
        {
            await _apiService.Post<ResetPasswordRequest>("auth/reset-password", resetPasswordRequest);
            isConfirmationSuccessful = true;
        }
        catch (ValidationException ex)
        {
            customValidator.ClearErrors();
            customValidator.DisplayErrors(ex.ErrorsGrouped);
        }
        catch (ApplicationException ex)
        {
            _popupMessageService.ShowPopup(ex.Message, PopupMessageType.Error);
        }
    }
}
