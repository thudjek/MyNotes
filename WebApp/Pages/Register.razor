@page "/sign-up"
@layout NotAuthorizedLayout
@using SharedModels.Requests.Auth
@using SharedModels.Responses.Auth
@using WebApp.Common.Exceptions
@inject PopupMessageService _popupMessageService
@inject ApiService _apiService

@if (!isRegisterSuccessful)
{
    <EditForm Model="@registerRequest" OnSubmit="SubmitRegister">
        <CustomValidator @ref="customValidator" />
        <div class="row">
            <div class="col-8 offset-2 col-md-6 offset-md-3 col-lg-5 offset-lg-3point5 col-xl-4 offset-xl-4 mb-3 text-start">
                <InputText class="form-control input" placeholder="Email" @bind-Value=registerRequest.Email />
                <ValidationMessage For="() => registerRequest.Email" />
            </div>
        </div>
        <div class="row">
                <div class="col-8 offset-2 col-md-6 offset-md-3 col-lg-5 offset-lg-3point5 col-xl-4 offset-xl-4 mb-3 text-start">
                <InputText class="form-control input" placeholder="Password" type="password" @bind-Value=registerRequest.Password />
                <ValidationMessage For="() => registerRequest.Password" />
            </div>
        </div>
        <div class="row">
                <div class="col-8 offset-2 col-md-6 offset-md-3 col-lg-5 offset-lg-3point5 col-xl-4 offset-xl-4 mb-3 text-start">
                <InputText class="form-control input" placeholder="Confirm password" type="password" @bind-Value=registerRequest.ConfirmPassword />
                <ValidationMessage For="() => registerRequest.ConfirmPassword" />
            </div>
        </div>
        <div class="row">
            <div class="col-8 offset-2 col-md-6 offset-md-3 col-lg-5 offset-lg-3point5 col-xl-4 offset-xl-4 mb-3">
                <SubmitButton @ref="submitButton">Log in</SubmitButton>
            </div>
        </div>
    </EditForm>
    <div class="row">
        <div class="col-8 offset-2 col-md-6 offset-md-3 col-lg-5 offset-lg-3point5 col-xl-4 offset-xl-4 mb-3">
            <br />
            <p>By signing up you agree to our <a class="link" href="terms">Terms of Service</a></p>
        </div>
        <div class="col-8 offset-2 col-md-6 offset-md-3 col-lg-5 offset-lg-3point5 col-xl-4 offset-xl-4 mb-3">
            <p>Already have an account? <a class="link" href="login">Log in</a></p>
        </div>
    </div>
}
else
{
    <h3>Sign up successful, we've sent you a confirmation email.</h3>
    <h3>If email didn't arrive you can <a class="link" @onclick="ResendEmail">resend</a> confirmation email and try again.</h3>
}

@code {
    bool isRegisterSuccessful = false;
    RegisterRequest registerRequest = new ();
    CustomValidator customValidator;
    SubmitButton submitButton;

    private async Task SubmitRegister()
    {
        try
        {
            submitButton.Disable();
            await _apiService.Post<RegisterRequest>("auth/register", registerRequest);
            isRegisterSuccessful = true;
        }
        catch (ValidationException ex)
        {
            submitButton.Enable();
            customValidator.ClearErrors();
            customValidator.DisplayErrors(ex.ErrorsGrouped);
        }
        catch (ApplicationException ex)
        {
            submitButton.Enable();
            _popupMessageService.ShowPopup(ex.Message, PopupMessageType.Error);
        }
    }

    private async Task ResendEmail()
    {
        try
        {
            await _apiService.Post<ResendConfirmationEmailRequest>("auth/resend-confirmation-email", new ResendConfirmationEmailRequest() { Email = registerRequest.Email ?? string.Empty });
            _popupMessageService.ShowPopup("Confirmation email has been sent", PopupMessageType.Success);
        }
        catch (ApplicationException ex)
        {
            _popupMessageService.ShowPopup(ex.Message, PopupMessageType.Error);
        }
    }
}
