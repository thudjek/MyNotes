@page "/sign-up"
@layout NotAuthorizedLayout
@using SharedModels.Requests.Auth
@using SharedModels.Responses.Auth
@inject IHttpClientFactory _httpClientFactory
@inject ErrorPopupService _errorPopupService;

@if (!isRegisterSuccessful)
{
    <EditForm Model="@registerRequest" OnSubmit="SubmitRegister">
        <CustomValidator @ref="customValidator" />
        <div class="row">
            <div class="col-8 offset-2 col-md-6 offset-md-3 col-lg-5 offset-lg-3point5 col-xl-4 offset-xl-4 mb-3 text-start">
                <InputText class="form-control input" placeholder="Email" @bind-Value=registerRequest.Email />
                <ValidationMessage For="() => registerRequest.Email" />
            </div>
        </div>
        <div class="row">
                <div class="col-8 offset-2 col-md-6 offset-md-3 col-lg-5 offset-lg-3point5 col-xl-4 offset-xl-4 mb-3 text-start">
                <InputText class="form-control input" placeholder="Password" type="password" @bind-Value=registerRequest.Password />
                <ValidationMessage For="() => registerRequest.Password" />
            </div>
        </div>
        <div class="row">
                <div class="col-8 offset-2 col-md-6 offset-md-3 col-lg-5 offset-lg-3point5 col-xl-4 offset-xl-4 mb-3 text-start">
                <InputText class="form-control input" placeholder="Confirm password" type="password" @bind-Value=registerRequest.ConfirmPassword />
                <ValidationMessage For="() => registerRequest.ConfirmPassword" />
            </div>
        </div>
        <div class="row">
            <div class="col-8 offset-2 col-md-6 offset-md-3 col-lg-5 offset-lg-3point5 col-xl-4 offset-xl-4 mb-3">
                <button class="btn btn-primary w-100" type="submit">Sign up</button>
            </div>
        </div>
    </EditForm>
    <div class="row">
        <div class="col-8 offset-2 col-md-6 offset-md-3 col-lg-5 offset-lg-3point5 col-xl-4 offset-xl-4 mb-3">
            <br />
            <p>By signing up you agree to our <a class="link" href="terms">Terms of Service</a></p>
        </div>
        <div class="col-8 offset-2 col-md-6 offset-md-3 col-lg-5 offset-lg-3point5 col-xl-4 offset-xl-4 mb-3">
            <p>Already have an account? <a class="link" href="login">Log in</a></p>
        </div>
    </div>
}
else
{
    <h3>Sign up successful, we've sent you confirmation email.</h3>
}

@code {
    private bool isRegisterSuccessful = false;
    private RegisterRequest registerRequest = new ();
    private HttpClient httpClient = null;
    CustomValidator customValidator;

    protected override void OnInitialized()
    {
        httpClient = _httpClientFactory.CreateClient(Constants.HttpClientName);
    }

    private async Task SubmitRegister()
    {
        var httpResponse = await httpClient.PostAsJsonAsync("auth/register", registerRequest);
        if (httpResponse.IsSuccessStatusCode)
        {
            isRegisterSuccessful = true; 
        }
        else
        {
            var errorModel = await httpResponse.Content.ReadFromJsonAsync<ErrorModel>();
            if (errorModel.Errors != null)
            {
                customValidator.ClearErrors();
                customValidator.DisplayErrors(errorModel.ErrorsGrouped);
            }
            else
            {
                _errorPopupService.ShowErrorPopup(errorModel.Error);
            }
        }
    }
}
