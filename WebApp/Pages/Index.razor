@page "/"
@using SharedModels.Responses.Notes
@using WebApp.Components.Dropdown
@attribute [Authorize]
@inject IHttpClientFactory _httpClientFactory
@inject PopupMessageService _popupMessageService
@inject ILocalStorageService _localStorage
@inject RefreshTokenService _refreshTokenService

<div class="sidebar"> 
    <div class="sidebar-header">
        <Dropdown>
            <DropdownToggleText Id="dropdownToggleText">thudjek@gmail.com <i class="bi bi-caret-down font-14"></i></DropdownToggleText>
            <DropdownMenu>
                <DropdownItem Href="logout">Logout</DropdownItem>
            </DropdownMenu>
        </Dropdown>
    </div>
    <div class="sidebar-item">
        <SearchBar SearchChangedCallback="GetNotes" />
    </div>
</div>
<div class="d-inline-block">
    @if (notes != null && notes.Count > 0)
    {
        <ul>
            @foreach(var note in notes)
            {
                <li>Title: @note.Title, Content: @note.Content</li>
            }
        </ul>    
    }
</div>

@code {
    private HttpClient httpClient = null;
    private List<NoteResponse> notes = null;

    protected override async Task OnInitializedAsync()
    {
        httpClient = _httpClientFactory.CreateClient(Constants.HttpClientName);
        await _refreshTokenService.TryRefreshToken();
        await GetNotes();
    }

    private async Task GetNotes(string filter = "")
    {
        var queryString = !string.IsNullOrWhiteSpace(filter) ? "?filter=" + filter : "";
        var httpResponse = await httpClient.GetAsync($"notes{queryString}", HttpCompletionOption.ResponseHeadersRead);
        if (httpResponse.IsSuccessStatusCode)
        {
            notes = await httpResponse.Content.ReadFromJsonAsync<List<NoteResponse>>();
        }
        else
        {
            var errorModel = await httpResponse.Content.ReadFromJsonAsync<ErrorModel>();
            _popupMessageService.ShowPopup(errorModel.Error, PopupMessageType.Error); //how to handle potential 401? try error boundry for other unhandeled exceptions
        }
    }
}