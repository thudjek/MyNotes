@page "/"
@using SharedModels.Requests.Notes;
@using SharedModels.Responses.Notes
@using System.Security.Claims;
@using WebApp.Common.Exceptions;
@using WebApp.Components.Dropdown
@using WebApp.Components.Sidebar
@inject AuthenticationStateProvider _authStateProvider
@inject ApiService _apiService
@inject PopupMessageService _popupMessageService
@attribute [Authorize]

<PopupModal @ref="modal" />

<CascadingValue Value="activeNote">
    <div class="main-row">
        <div class="sidebar-col">
            <Sidebar Email="@email" Notes="currentNotes" GetCurrentNotesCallback="GetCurrentNotes"  CreateNoteCallback="CreateNewNote" SetActiveNoteCallback="SetActiveNote" />
        </div>
        <div class="content-col">
            <div class="content-container">
                <ContentBar RestoreNoteCallback="RestoreNote" EmptyTrashCallback="EmptyTrash" UpdateNoteCallback="UpdateNote" DeleteNoteCallback="DeleteNote" />
                <RichTextEditor @ref="richTextEditor" />
            </div>
        </div>
    </div>
</CascadingValue>

@code {
    string email;
    PopupModal modal;
    RichTextEditor richTextEditor;
    List<NoteResponse> allNotes;
    List<NoteResponse> currentNotes;
    NoteResponse activeNote;
    string filter;


    protected override async Task OnInitializedAsync()
    {
        var authState = await ((AuthStateProvider)_authStateProvider).GetAuthenticationStateAsync();
        email = authState.User.FindFirst(c => c.Type == ClaimTypes.Email)?.Value;

        await GetAllNotes();
        GetCurrentNotes(false);
    }

    private async Task GetAllNotes()
    {
        try
        {
            allNotes = await _apiService.Get<List<NoteResponse>>("notes");
        }
        catch (ApplicationException ex)
        {
            _popupMessageService.ShowPopup(ex.Message, PopupMessageType.Error);
        }
    }

    private void GetCurrentNotes(GetCurrentNotesArgs args)
    {
        filter = args.Filter;
        GetCurrentNotes(args.IsTrash, args.Filter);
    } 

    private void GetCurrentNotes(bool isTrash, string filter = "")
    {
        if (allNotes != null && allNotes.Count > 0)
        {
            var query = allNotes.Where(n => n.IsDeleted == isTrash);

            if (!string.IsNullOrWhiteSpace(filter))
                query = query.Where(n => n.Title.ToLower().Contains(filter.ToLower()) || n.Content.ToLower().Contains(filter.ToLower()));

            currentNotes = query.OrderByDescending(n => n.Date).ToList();
            activeNote = currentNotes.FirstOrDefault();
        }
        else
        {
            if (activeNote != null)
                activeNote = null;

            currentNotes = allNotes;
        }
    }

    private async Task CreateNewNote()
    {
        try
        {
            string defaultContent = "<p><br></p>";
            var createNoteRequest = new CreateNoteRequest() { Content = defaultContent };
            await _apiService.Post("notes", createNoteRequest);
            await GetAllNotes();
            GetCurrentNotes(false, filter);
        }
        catch (ApplicationException ex)
        {
            _popupMessageService.ShowPopup(ex.Message, PopupMessageType.Error);
        }
    }

    private async Task RestoreNote()
    {
        try
        {
            await _apiService.Post($"notes/restore/{activeNote.Id}");
            await GetAllNotes();
            GetCurrentNotes(true, filter);
        }
        catch (ApplicationException ex)
        {
            _popupMessageService.ShowPopup(ex.Message, PopupMessageType.Error);
        }
    }

    private async Task EmptyTrash(bool isConfirmedByModal)
    {
        if (isConfirmedByModal)
        {
            try
            {
                await _apiService.Post("notes/empty-trash");
                await GetAllNotes();
                GetCurrentNotes(true, filter);
            }
            catch (ApplicationException ex)
            {
                _popupMessageService.ShowPopup(ex.Message, PopupMessageType.Error);
            }
        }
        else
        {
            modal.SetModalContent(ModalType.EmptyTrashModal());
            modal.OkButtonCallback = new EventCallback(this, () => EmptyTrash(true));
            await modal.Show();
        }
    }

    private async Task UpdateNote()
    {
        try
        {
            var updateNoteRequest = await richTextEditor.GetUpdateNoteRequest();
            await _apiService.Put($"notes/{activeNote.Id}", updateNoteRequest);
            await GetAllNotes();
            GetCurrentNotes(false, filter);
        }
        catch (ValidationException ex)
        {
            _popupMessageService.ShowPopup(ex.Errors[0], PopupMessageType.Error);
        }
        catch (ApplicationException ex)
        {
            _popupMessageService.ShowPopup(ex.Message, PopupMessageType.Error);
        }
    }

    private async Task DeleteNote()
    {
        try
        {
            await _apiService.Post($"notes/delete/{activeNote.Id}");
            await GetAllNotes();
            GetCurrentNotes(false, filter);
        }
        catch (ApplicationException ex)
        {
            _popupMessageService.ShowPopup(ex.Message, PopupMessageType.Error);
        }
    }

    private void SetActiveNote(NoteResponse note)
    {
        activeNote = note;
    }
}