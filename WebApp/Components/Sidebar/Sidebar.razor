@using WebApp.Components.Dropdown
@using SharedModels.Responses.Notes
@inject ApiService _apiService
@inject PopupMessageService _popupMessageService

 <CascadingValue Value="this" IsFixed=true>
    <div class="sidebar"> 
        <div class="sidebar-header">
            @if (activeNavItemType == NavItemType.Notes)
            {
                <div @onclick="CreateNewNote" class="new-note-btn"><i class="bi bi-pencil-square"></i></div>
            }
            <Dropdown>
                <DropdownToggleText Id="dropdownToggleText">thudjek@gmail.com <i class="bi bi-caret-down font-14"></i></DropdownToggleText>
                <DropdownMenu>
                    <DropdownItem Href="logout">Logout</DropdownItem>
                </DropdownMenu>
            </Dropdown>
        </div>
        <div class="sidebar-item">
            <SearchBar @ref="searchBar" SearchChangedCallback="FilterNotes" />
        </div>
        <SidebarNavItem Type="NavItemType.Notes" IsDefaultActive=true OnClickCallback="OnNavItemClickHandler">
            <i class="bi bi-journal-text"></i>&nbsp; Notes
        </SidebarNavItem>
        <SidebarNavItem Type="NavItemType.Trash" OnClickCallback="OnNavItemClickHandler">
            <i class="bi bi-trash"></i>&nbsp; Trash
        </SidebarNavItem>
        <hr />
        <SidebarNotesContainer Notes="outputNotes" ActiveNavItemType="activeNavItemType" />
    </div>
 </CascadingValue>


@code {
    private List<NoteResponse> AllNotes;
    private List<NoteResponse> currentSetOfNotes;
    private List<NoteResponse> outputNotes;
    private SearchBar searchBar;
    private List<SidebarNavItem> navItems;
    private NavItemType activeNavItemType;

    protected override async Task OnInitializedAsync()
    {
        navItems = new();
        activeNavItemType = NavItemType.Notes;
        await GetAllNotes();
    }

    protected override void OnParametersSet()
    {
        SetCurrentNotes(false);
    }

    public void AddNavItem(SidebarNavItem navItem)
    {
        navItems.Add(navItem);
    }

    private async Task OnNavItemClickHandler(NavItemType navItemType)
    {
        SetActiveNavItem(navItemType);
        await searchBar.ClearInput(false);
        SetCurrentNotes(navItemType == NavItemType.Trash);
    }

    private void SetActiveNavItem(NavItemType navItemType)
    {
        foreach (var navItem in navItems)
        {
            if (navItem.Type == navItemType)
                navItem.Activate();
            else
                navItem.Deactivate();
        }

        activeNavItemType = navItemType;
    }

    private void SetCurrentNotes(bool isTrash)
    {
        currentSetOfNotes = AllNotes?
            .Where(n => n.IsDeleted == isTrash)
            .OrderByDescending(n => n.Date)
            .ToList();

        outputNotes = currentSetOfNotes;
    }

    private void FilterNotes(string filter)
    {
        if (currentSetOfNotes != null && currentSetOfNotes.Count > 0)
        {
            outputNotes = currentSetOfNotes.Where(n => n.Title.ToLower().Contains(filter.ToLower()) || n.Content.ToLower().Contains(filter.ToLower())).ToList();
        }
    }

    private async Task CreateNewNote()
    {
        try
        {
            await _apiService.Post("notes");
            await GetAllNotes();
            SetCurrentNotes(false);
        }
        catch (ApplicationException ex)
        {
            _popupMessageService.ShowPopup(ex.Message, PopupMessageType.Error);
        }
    }

    private async Task GetAllNotes()
    {
        try
        {
            AllNotes = await _apiService.Get<List<NoteResponse>>("notes");
        }
        catch (ApplicationException ex)
        {
            _popupMessageService.ShowPopup(ex.Message, PopupMessageType.Error);
        }
    }
}
