@using WebApp.Components.Dropdown
@using SharedModels.Responses.Notes
@inject ApiService _apiService
@inject PopupMessageService _popupMessageService

 <CascadingValue Value="this" IsFixed=true>
    <div class="sidebar"> 
        <div class="sidebar-header">
            @if (activeNavItemType == NavItemType.Notes)
            {
                <div @onclick="() => CreateNoteCallback.InvokeAsync()" class="new-note-btn"><i class="bi bi-pencil-square"></i></div>
            }
            <MNDropdown>
                <MNDropdownToggleText Id="dropdownToggleText">@Email <i class="bi bi-caret-down font-14"></i></MNDropdownToggleText>
                <MNDropdownMenu>
                    <MNDropdownItem Href="logout">Logout</MNDropdownItem>
                </MNDropdownMenu>
            </MNDropdown>
        </div>
        <div class="sidebar-item">
            <SearchBar @ref="searchBar" FilterNotesCallback="FilterNotes" />
        </div>
        <SidebarNavItem Type="NavItemType.Notes" IsDefaultActive=true OnClickCallback="NavItemClickHandler">
            <i class="bi bi-journal-text"></i>&nbsp; Notes
        </SidebarNavItem>
        <SidebarNavItem Type="NavItemType.Trash" OnClickCallback="NavItemClickHandler">
            <i class="bi bi-trash"></i>&nbsp; Trash
        </SidebarNavItem>
        <hr />
        <SidebarNotesContainer Notes="Notes" ActiveNavItemType="activeNavItemType" SetActiveNoteCallback="(note) => SetActiveNoteCallback.InvokeAsync(note)" />
    </div>
 </CascadingValue>


@code {
    SearchBar searchBar;
    List<SidebarNavItem> navItems;
    NavItemType activeNavItemType;

    [Parameter]
    public string Email { get; set; }

    [Parameter]
    public List<NoteResponse> Notes { get; set; }

    [Parameter]
    public EventCallback<GetCurrentNotesArgs> GetCurrentNotesCallback { get; set; }

    [Parameter]
    public EventCallback CreateNoteCallback { get; set; }

    [Parameter]
    public EventCallback<NoteResponse> SetActiveNoteCallback { get; set; }

    protected override void OnInitialized()
    {
        var user = 
        navItems = new();
        activeNavItemType = NavItemType.Notes;
    }

    public void AddNavItem(SidebarNavItem navItem)
    {
        navItems.Add(navItem);
    }

    private async Task NavItemClickHandler(NavItemType navItemType)
    {
        SetActiveNavItem(navItemType);
        await searchBar.ClearInput();
    }

    private void SetActiveNavItem(NavItemType navItemType)
    {
        foreach (var navItem in navItems)
        {
            if (navItem.Type == navItemType)
                navItem.Activate();
            else
                navItem.Deactivate();
        }

        activeNavItemType = navItemType;
    }

    private async Task FilterNotes(string filter)
    {
        await GetCurrentNotesCallback.InvokeAsync(new GetCurrentNotesArgs(activeNavItemType == NavItemType.Trash, filter));
    }
}
