@using WebApp.Components.Dropdown
@using SharedModels.Responses.Notes
@inject ApiService _apiService
@inject PopupMessageService _popupMessageService

 <CascadingValue Value="CurrentActiveNavItem">
    <div class="sidebar"> 
        <div class="sidebar-header">
            <Dropdown>
                <DropdownToggleText Id="dropdownToggleText">thudjek@gmail.com <i class="bi bi-caret-down font-14"></i></DropdownToggleText>
                <DropdownMenu>
                    <DropdownItem Href="logout">Logout</DropdownItem>
                </DropdownMenu>
            </Dropdown>
        </div>
        <div class="sidebar-item">
            <SearchBar @ref="searchBar" SearchChangedCallback="FilterNotes" />
        </div>
        <SidebarNavItem Name="notesNavItem" OnClickCallback="OnNavItemClickHandler">
            <i class="bi bi-journal-text"></i>&nbsp; Notes
        </SidebarNavItem>
        <SidebarNavItem Name="trashNavItem" OnClickCallback="OnNavItemClickHandler">
            <i class="bi bi-trash"></i>&nbsp; Trash
        </SidebarNavItem>
        @if (CurrentActiveNavItem == "notesNavItem")
        {
            <div class="sidebar-item text-center">
                <button class="new-note-btn" @onclick="CreateNewNote">New note</button>
            </div>
        }
        <hr />
        @if (outputNotes != null && outputNotes.Count > 0)
        {
            <div class="notes-container">
                @foreach(var note in outputNotes)
                {
                    <div class="card note-card @(note != outputNotes.Last() ? "mb-1": "")">
                        <div class="card-body">
                            <h5 class="card-title">@note.Title</h5>
                            <p class="card-text">@note.Content</p>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            if (CurrentActiveNavItem == "notesNavItem")
            {
                <div class="text-center">No notes to display</div>
            }
            else
            {
                <div class="text-center">Trash is empty</div>
            }
        }
    </div>
 </CascadingValue>


@code {
    [Parameter]
    public string DefaultActiveNavItem { get; set; }

    public string CurrentActiveNavItem { get; private set; }

    private List<NoteResponse> AllNotes;
    private List<NoteResponse> currentSetOfNotes;
    private List<NoteResponse> outputNotes;

    private SearchBar searchBar;

    protected override async Task OnInitializedAsync()
    {
        await GetAllNotes();
    }

    protected override void OnParametersSet()
    {
        CurrentActiveNavItem = DefaultActiveNavItem;
        SetCurrentNotes(false);
    }

    private async Task OnNavItemClickHandler(string activeItemName)
    {
        await searchBar.ClearInput(false);
        CurrentActiveNavItem = activeItemName;
        SetCurrentNotes(CurrentActiveNavItem == "trashNavItem");
    }

    private void SetCurrentNotes(bool isTrash)
    {
        currentSetOfNotes = AllNotes?
            .Where(n => n.IsDeleted == isTrash)
            .OrderByDescending(n => n.Date)
            .ToList();

        outputNotes = currentSetOfNotes;
    }

    private void FilterNotes(string filter)
    {
        if (currentSetOfNotes != null && currentSetOfNotes.Count > 0)
        {
            outputNotes = currentSetOfNotes.Where(n => n.Title.ToLower().Contains(filter.ToLower()) || n.Content.ToLower().Contains(filter.ToLower())).ToList();
        }
    }

    private async Task CreateNewNote()
    {
        try
        {
            await _apiService.Post("notes");
            await GetAllNotes();
            SetCurrentNotes(false);
        }
        catch (ApplicationException ex)
        {
            _popupMessageService.ShowPopup(ex.Message, PopupMessageType.Error);
        }
    }

    private async Task GetAllNotes()
    {
        try
        {
            AllNotes = await _apiService.Get<List<NoteResponse>>("notes");
        }
        catch (ApplicationException ex)
        {
            _popupMessageService.ShowPopup(ex.Message, PopupMessageType.Error);
        }
    }
}
