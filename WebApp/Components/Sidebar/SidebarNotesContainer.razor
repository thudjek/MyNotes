@using SharedModels.Responses.Notes

@if (Notes != null && Notes.Count > 0)
{
    <div class="notes-container">
        @foreach (var note in Notes)
        {
            <div @onclick="() => SetActiveNote(note)" class="card note-card @(GetCssActiveClass(note)) @(GetCssMarginClass(note))">
                <div class="card-body">
                    <p class="card-text truncate">@(!string.IsNullOrWhiteSpace(note.Content) ? note.Content : "Empty note...")</p>
                </div>
            </div>
        }
    </div>
}
else
{
    if (ActiveNavItemType == NavItemType.Notes)
    {
        <div class="text-center">No notes to display</div>
    }
    else
    {
        <div class="text-center">Trash is empty</div>
    }
}

@code {
    [Parameter]
    public List<NoteResponse> Notes { get; set; }

    [Parameter]
    public NavItemType ActiveNavItemType { get; set; }

    [Parameter]
    public EventCallback<NoteResponse> SetActiveNoteCallback { get; set; }

    [CascadingParameter]
    public NoteResponse ActiveNote { get; set; }

    private async Task SetActiveNote(NoteResponse note)
    {
        if(ActiveNote.Id != note.Id)
            await SetActiveNoteCallback.InvokeAsync(note);
    }

    private string GetCssMarginClass(NoteResponse note)
    {
        return note != Notes.Last() ? "mb-1" : "";
    }

    private string GetCssActiveClass(NoteResponse note)
    {
        return ActiveNote != null && ActiveNote.Id == note.Id ? "active" : "";
    }
}
