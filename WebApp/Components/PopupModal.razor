@inject IJSRuntime _jsRuntime;

<div class="modal fade" id="modal" data-bs-backdrop="static" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabel">@title</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @body
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="InvokeCloseButtonCallbackIfExists">@closeButtonText</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="() => OkButtonCallback.InvokeAsync()">@okButtonText</button>
            </div>
        </div>
    </div>
</div>

@code {
    string title;
    string body;
    string okButtonText;
    string closeButtonText;

    public EventCallback OkButtonCallback { get; set; }
    public EventCallback CloseButtonCallback { get; set; }

    protected override void OnInitialized()
    {
        title = "";
        body = "";
        okButtonText = "";
        closeButtonText = "";
    }

    public void SetModalContent(ModalType modalType)
    {
        title = modalType.Title;
        body = modalType.Body;
        okButtonText = modalType.OkButtonText;
        closeButtonText = modalType.CloseButtonText;
        StateHasChanged();
    }

    public async Task Show()
    {
        await _jsRuntime.InvokeVoidAsync("ShowModal");
    }

    private async Task InvokeCloseButtonCallbackIfExists()
    {
        if (CloseButtonCallback.HasDelegate)
            await CloseButtonCallback.InvokeAsync();
    }
}